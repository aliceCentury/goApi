// Code generated by goa v3.0.4, DO NOT EDIT.
//
// auction service
//
// Command:
// $ goa gen calcsvc/design

package auction

import (
	auctionviews "calcsvc/gen/auction/views"
	"context"
)

// The auction service retrieves bottles given a set of criteria.
type Service interface {
	// 获取拍卖列表
	GetAuctionProductListByStatus(context.Context, *ListData) (res AuctionProductCollection, err error)
	// 拍卖详情
	// The "view" return value must have one of the following views
	//	- "bid"
	//	- "auctionList"
	//	- "default": A StoredBottle describes a bottle retrieved by the storage service.
	GetAuctionProductDetail(context.Context, *GetAuctionProductDetailPayload) (res *AuctionProduct, view string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "auction"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"getAuctionProductListByStatus", "getAuctionProductDetail"}

// ListData is the payload type of the auction service
// getAuctionProductListByStatus method.
type ListData struct {
	// 拍卖状态 1:历史 2:正在进行 3:即将开始
	AuctionStatus *int
	// 当前页数
	CurrentPage *int
	// 每页返回的条数
	PageSize *int
}

// AuctionProductCollection is the result type of the auction service
// getAuctionProductListByStatus method.
type AuctionProductCollection []*AuctionProduct

// GetAuctionProductDetailPayload is the payload type of the auction service
// getAuctionProductDetail method.
type GetAuctionProductDetailPayload struct {
	// auctionId
	ID string
}

// AuctionProduct is the result type of the auction service
// getAuctionProductDetail method.
type AuctionProduct struct {
	ID                    *string
	AddPrice              *int
	ArtNo                 *string
	AuctionStatus         *int
	AuctionType           *int
	BidSceneID            *int
	BondPrice             *int
	BuyNumber             *int
	BuyUnitPrice          *string
	BuyoutPrice           *int
	CapPrice              *int
	CrowdfundingPackageID *string
	CurrentPrice          *int
	EndTime               *int64
	HeadPortrait          *string
	IsHaveProxy           *int
	IsReservePrice        *int
	LastTime              *int64
	LimitNumber           *int
	MktPrice              *int
	PicturesURL           *string
	ProdID                *int32
	ProdName              *string
	QrURL                 *string
	RemindTime            *int64
	ReservePrice          *string
	ResultStatus          *int
	RuleID                *int
	SerialNum             *string
	ShareURL              *string
	StartAuctionPrice     *int
	StartTime             *int64
	Title                 *string
	TotalNumber           *int
	TransactionNumber     *int
	TransactionPrice      *string
	UserID                *string
	UserName              *string
}

// NotFound is the type returned when attempting to show or delete a bottle
// that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing bottle
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a bottle that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// NewAuctionProductCollection initializes result type AuctionProductCollection
// from viewed result type AuctionProductCollection.
func NewAuctionProductCollection(vres auctionviews.AuctionProductCollection) AuctionProductCollection {
	var res AuctionProductCollection
	switch vres.View {
	case "bid":
		res = newAuctionProductCollectionBid(vres.Projected)
	case "auctionList":
		res = newAuctionProductCollectionAuctionList(vres.Projected)
	case "default", "":
		res = newAuctionProductCollection(vres.Projected)
	}
	return res
}

// NewViewedAuctionProductCollection initializes viewed result type
// AuctionProductCollection from result type AuctionProductCollection using the
// given view.
func NewViewedAuctionProductCollection(res AuctionProductCollection, view string) auctionviews.AuctionProductCollection {
	var vres auctionviews.AuctionProductCollection
	switch view {
	case "bid":
		p := newAuctionProductCollectionViewBid(res)
		vres = auctionviews.AuctionProductCollection{p, "bid"}
	case "auctionList":
		p := newAuctionProductCollectionViewAuctionList(res)
		vres = auctionviews.AuctionProductCollection{p, "auctionList"}
	case "default", "":
		p := newAuctionProductCollectionView(res)
		vres = auctionviews.AuctionProductCollection{p, "default"}
	}
	return vres
}

// NewAuctionProduct initializes result type AuctionProduct from viewed result
// type AuctionProduct.
func NewAuctionProduct(vres *auctionviews.AuctionProduct) *AuctionProduct {
	var res *AuctionProduct
	switch vres.View {
	case "bid":
		res = newAuctionProductBid(vres.Projected)
	case "auctionList":
		res = newAuctionProductAuctionList(vres.Projected)
	case "default", "":
		res = newAuctionProduct(vres.Projected)
	}
	return res
}

// NewViewedAuctionProduct initializes viewed result type AuctionProduct from
// result type AuctionProduct using the given view.
func NewViewedAuctionProduct(res *AuctionProduct, view string) *auctionviews.AuctionProduct {
	var vres *auctionviews.AuctionProduct
	switch view {
	case "bid":
		p := newAuctionProductViewBid(res)
		vres = &auctionviews.AuctionProduct{p, "bid"}
	case "auctionList":
		p := newAuctionProductViewAuctionList(res)
		vres = &auctionviews.AuctionProduct{p, "auctionList"}
	case "default", "":
		p := newAuctionProductView(res)
		vres = &auctionviews.AuctionProduct{p, "default"}
	}
	return vres
}

// newAuctionProductCollectionBid converts projected type
// AuctionProductCollection to service type AuctionProductCollection.
func newAuctionProductCollectionBid(vres auctionviews.AuctionProductCollectionView) AuctionProductCollection {
	res := make(AuctionProductCollection, len(vres))
	for i, n := range vres {
		res[i] = newAuctionProductBid(n)
	}
	return res
}

// newAuctionProductCollectionAuctionList converts projected type
// AuctionProductCollection to service type AuctionProductCollection.
func newAuctionProductCollectionAuctionList(vres auctionviews.AuctionProductCollectionView) AuctionProductCollection {
	res := make(AuctionProductCollection, len(vres))
	for i, n := range vres {
		res[i] = newAuctionProductAuctionList(n)
	}
	return res
}

// newAuctionProductCollection converts projected type AuctionProductCollection
// to service type AuctionProductCollection.
func newAuctionProductCollection(vres auctionviews.AuctionProductCollectionView) AuctionProductCollection {
	res := make(AuctionProductCollection, len(vres))
	for i, n := range vres {
		res[i] = newAuctionProduct(n)
	}
	return res
}

// newAuctionProductCollectionViewBid projects result type
// AuctionProductCollection to projected type AuctionProductCollectionView
// using the "bid" view.
func newAuctionProductCollectionViewBid(res AuctionProductCollection) auctionviews.AuctionProductCollectionView {
	vres := make(auctionviews.AuctionProductCollectionView, len(res))
	for i, n := range res {
		vres[i] = newAuctionProductViewBid(n)
	}
	return vres
}

// newAuctionProductCollectionViewAuctionList projects result type
// AuctionProductCollection to projected type AuctionProductCollectionView
// using the "auctionList" view.
func newAuctionProductCollectionViewAuctionList(res AuctionProductCollection) auctionviews.AuctionProductCollectionView {
	vres := make(auctionviews.AuctionProductCollectionView, len(res))
	for i, n := range res {
		vres[i] = newAuctionProductViewAuctionList(n)
	}
	return vres
}

// newAuctionProductCollectionView projects result type
// AuctionProductCollection to projected type AuctionProductCollectionView
// using the "default" view.
func newAuctionProductCollectionView(res AuctionProductCollection) auctionviews.AuctionProductCollectionView {
	vres := make(auctionviews.AuctionProductCollectionView, len(res))
	for i, n := range res {
		vres[i] = newAuctionProductView(n)
	}
	return vres
}

// newAuctionProductBid converts projected type AuctionProduct to service type
// AuctionProduct.
func newAuctionProductBid(vres *auctionviews.AuctionProductView) *AuctionProduct {
	res := &AuctionProduct{
		AddPrice:     vres.AddPrice,
		ArtNo:        vres.ArtNo,
		HeadPortrait: vres.HeadPortrait,
	}
	return res
}

// newAuctionProductAuctionList converts projected type AuctionProduct to
// service type AuctionProduct.
func newAuctionProductAuctionList(vres *auctionviews.AuctionProductView) *AuctionProduct {
	res := &AuctionProduct{
		AddPrice:              vres.AddPrice,
		ArtNo:                 vres.ArtNo,
		AuctionStatus:         vres.AuctionStatus,
		AuctionType:           vres.AuctionType,
		BidSceneID:            vres.BidSceneID,
		BondPrice:             vres.BondPrice,
		BuyNumber:             vres.BuyNumber,
		BuyUnitPrice:          vres.BuyUnitPrice,
		BuyoutPrice:           vres.BuyoutPrice,
		CapPrice:              vres.CapPrice,
		CrowdfundingPackageID: vres.CrowdfundingPackageID,
		CurrentPrice:          vres.CurrentPrice,
		EndTime:               vres.EndTime,
		HeadPortrait:          vres.HeadPortrait,
		ID:                    vres.ID,
		IsHaveProxy:           vres.IsHaveProxy,
		IsReservePrice:        vres.IsReservePrice,
		LastTime:              vres.LastTime,
		LimitNumber:           vres.LimitNumber,
		MktPrice:              vres.MktPrice,
		PicturesURL:           vres.PicturesURL,
		ProdID:                vres.ProdID,
		ProdName:              vres.ProdName,
		QrURL:                 vres.QrURL,
		RemindTime:            vres.RemindTime,
		ReservePrice:          vres.ReservePrice,
		ResultStatus:          vres.ResultStatus,
		SerialNum:             vres.SerialNum,
		ShareURL:              vres.ShareURL,
		StartAuctionPrice:     vres.StartAuctionPrice,
		StartTime:             vres.StartTime,
		Title:                 vres.Title,
		TotalNumber:           vres.TotalNumber,
		TransactionNumber:     vres.TransactionNumber,
		TransactionPrice:      vres.TransactionPrice,
		UserID:                vres.UserID,
		UserName:              vres.UserName,
	}
	return res
}

// newAuctionProduct converts projected type AuctionProduct to service type
// AuctionProduct.
func newAuctionProduct(vres *auctionviews.AuctionProductView) *AuctionProduct {
	res := &AuctionProduct{
		ID:                    vres.ID,
		AddPrice:              vres.AddPrice,
		ArtNo:                 vres.ArtNo,
		AuctionStatus:         vres.AuctionStatus,
		AuctionType:           vres.AuctionType,
		BidSceneID:            vres.BidSceneID,
		BondPrice:             vres.BondPrice,
		BuyNumber:             vres.BuyNumber,
		BuyUnitPrice:          vres.BuyUnitPrice,
		BuyoutPrice:           vres.BuyoutPrice,
		CapPrice:              vres.CapPrice,
		CrowdfundingPackageID: vres.CrowdfundingPackageID,
		CurrentPrice:          vres.CurrentPrice,
		EndTime:               vres.EndTime,
		HeadPortrait:          vres.HeadPortrait,
		IsHaveProxy:           vres.IsHaveProxy,
		IsReservePrice:        vres.IsReservePrice,
		LastTime:              vres.LastTime,
		LimitNumber:           vres.LimitNumber,
		MktPrice:              vres.MktPrice,
		PicturesURL:           vres.PicturesURL,
		ProdID:                vres.ProdID,
		ProdName:              vres.ProdName,
		QrURL:                 vres.QrURL,
		RemindTime:            vres.RemindTime,
		ReservePrice:          vres.ReservePrice,
		ResultStatus:          vres.ResultStatus,
		RuleID:                vres.RuleID,
		SerialNum:             vres.SerialNum,
		ShareURL:              vres.ShareURL,
		StartAuctionPrice:     vres.StartAuctionPrice,
		StartTime:             vres.StartTime,
		Title:                 vres.Title,
		TotalNumber:           vres.TotalNumber,
		TransactionNumber:     vres.TransactionNumber,
		TransactionPrice:      vres.TransactionPrice,
		UserID:                vres.UserID,
		UserName:              vres.UserName,
	}
	return res
}

// newAuctionProductViewBid projects result type AuctionProduct to projected
// type AuctionProductView using the "bid" view.
func newAuctionProductViewBid(res *AuctionProduct) *auctionviews.AuctionProductView {
	vres := &auctionviews.AuctionProductView{
		AddPrice:     res.AddPrice,
		ArtNo:        res.ArtNo,
		HeadPortrait: res.HeadPortrait,
	}
	return vres
}

// newAuctionProductViewAuctionList projects result type AuctionProduct to
// projected type AuctionProductView using the "auctionList" view.
func newAuctionProductViewAuctionList(res *AuctionProduct) *auctionviews.AuctionProductView {
	vres := &auctionviews.AuctionProductView{
		ID:                    res.ID,
		AddPrice:              res.AddPrice,
		ArtNo:                 res.ArtNo,
		AuctionStatus:         res.AuctionStatus,
		AuctionType:           res.AuctionType,
		BidSceneID:            res.BidSceneID,
		BondPrice:             res.BondPrice,
		BuyNumber:             res.BuyNumber,
		BuyUnitPrice:          res.BuyUnitPrice,
		BuyoutPrice:           res.BuyoutPrice,
		CapPrice:              res.CapPrice,
		CrowdfundingPackageID: res.CrowdfundingPackageID,
		CurrentPrice:          res.CurrentPrice,
		EndTime:               res.EndTime,
		HeadPortrait:          res.HeadPortrait,
		IsHaveProxy:           res.IsHaveProxy,
		IsReservePrice:        res.IsReservePrice,
		LastTime:              res.LastTime,
		LimitNumber:           res.LimitNumber,
		MktPrice:              res.MktPrice,
		PicturesURL:           res.PicturesURL,
		ProdID:                res.ProdID,
		ProdName:              res.ProdName,
		QrURL:                 res.QrURL,
		RemindTime:            res.RemindTime,
		ReservePrice:          res.ReservePrice,
		ResultStatus:          res.ResultStatus,
		SerialNum:             res.SerialNum,
		ShareURL:              res.ShareURL,
		StartAuctionPrice:     res.StartAuctionPrice,
		StartTime:             res.StartTime,
		Title:                 res.Title,
		TotalNumber:           res.TotalNumber,
		TransactionNumber:     res.TransactionNumber,
		TransactionPrice:      res.TransactionPrice,
		UserID:                res.UserID,
		UserName:              res.UserName,
	}
	return vres
}

// newAuctionProductView projects result type AuctionProduct to projected type
// AuctionProductView using the "default" view.
func newAuctionProductView(res *AuctionProduct) *auctionviews.AuctionProductView {
	vres := &auctionviews.AuctionProductView{
		ID:                    res.ID,
		AddPrice:              res.AddPrice,
		ArtNo:                 res.ArtNo,
		AuctionStatus:         res.AuctionStatus,
		AuctionType:           res.AuctionType,
		BidSceneID:            res.BidSceneID,
		BondPrice:             res.BondPrice,
		BuyNumber:             res.BuyNumber,
		BuyUnitPrice:          res.BuyUnitPrice,
		BuyoutPrice:           res.BuyoutPrice,
		CapPrice:              res.CapPrice,
		CrowdfundingPackageID: res.CrowdfundingPackageID,
		CurrentPrice:          res.CurrentPrice,
		EndTime:               res.EndTime,
		HeadPortrait:          res.HeadPortrait,
		IsHaveProxy:           res.IsHaveProxy,
		IsReservePrice:        res.IsReservePrice,
		LastTime:              res.LastTime,
		LimitNumber:           res.LimitNumber,
		MktPrice:              res.MktPrice,
		PicturesURL:           res.PicturesURL,
		ProdID:                res.ProdID,
		ProdName:              res.ProdName,
		QrURL:                 res.QrURL,
		RemindTime:            res.RemindTime,
		ReservePrice:          res.ReservePrice,
		ResultStatus:          res.ResultStatus,
		RuleID:                res.RuleID,
		SerialNum:             res.SerialNum,
		ShareURL:              res.ShareURL,
		StartAuctionPrice:     res.StartAuctionPrice,
		StartTime:             res.StartTime,
		Title:                 res.Title,
		TotalNumber:           res.TotalNumber,
		TransactionNumber:     res.TransactionNumber,
		TransactionPrice:      res.TransactionPrice,
		UserID:                res.UserID,
		UserName:              res.UserName,
	}
	return vres
}
