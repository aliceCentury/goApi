// Code generated by goa v3.0.4, DO NOT EDIT.
//
// auction endpoints
//
// Command:
// $ goa gen calcsvc/design

package auction

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "auction" service endpoints.
type Endpoints struct {
	GetAuctionProductListByStatus goa.Endpoint
}

// NewEndpoints wraps the methods of the "auction" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetAuctionProductListByStatus: NewGetAuctionProductListByStatusEndpoint(s),
	}
}

// Use applies the given middleware to all the "auction" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetAuctionProductListByStatus = m(e.GetAuctionProductListByStatus)
}

// NewGetAuctionProductListByStatusEndpoint returns an endpoint function that
// calls the method "getAuctionProductListByStatus" of service "auction".
func NewGetAuctionProductListByStatusEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListData)
		res, err := s.GetAuctionProductListByStatus(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedAuctionProductCollection(res, "auctionList")
		return vres, nil
	}
}
