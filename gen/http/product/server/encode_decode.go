// Code generated by goa v3.0.4, DO NOT EDIT.
//
// product HTTP server encoders and decoders
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	product "calcsvc/gen/product"
	productviews "calcsvc/gen/product/views"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
)

// EncodeProductEndpointResponse returns an encoder for responses returned by
// the product product endpoint.
func EncodeProductEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*productviews.Product)
		enc := encoder(ctx, w)
		body := NewProductResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeProductEndpointRequest returns a decoder for requests sent to the
// product product endpoint.
func DecodeProductEndpointRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewProductPayload(id)

		return payload, nil
	}
}

// EncodeProductEndpointError returns an encoder for errors returned by the
// product product endpoint.
func EncodeProductEndpointError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*product.NotFound)
			enc := encoder(ctx, w)
			body := NewProductNotFoundResponseBody(res)
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalProductviewsMediaViewToMediaResponseBody builds a value of type
// *MediaResponseBody from a value of type *productviews.MediaView.
func marshalProductviewsMediaViewToMediaResponseBody(v *productviews.MediaView) *MediaResponseBody {
	if v == nil {
		return nil
	}
	res := &MediaResponseBody{
		MediaURL:  v.MediaURL,
		MediaType: v.MediaType,
		Content:   v.Content,
		Sequence:  v.Sequence,
		MediaID:   v.MediaID,
	}

	return res
}
