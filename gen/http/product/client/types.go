// Code generated by goa v3.0.4, DO NOT EDIT.
//
// product HTTP client types
//
// Command:
// $ goa gen calcsvc/design

package client

import (
	product "calcsvc/gen/product"
	productviews "calcsvc/gen/product/views"

	goa "goa.design/goa/v3/pkg"
)

// ProductResponseBody is the type of the "product" service "product" endpoint
// HTTP response body.
type ProductResponseBody struct {
	// 商品Id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 编号
	ArtNo           *string              `form:"art_no,omitempty" json:"art_no,omitempty" xml:"art_no,omitempty"`
	CarouselList    []*MediaResponseBody `form:"carouselList,omitempty" json:"carouselList,omitempty" xml:"carouselList,omitempty"`
	CategoryName    *string              `form:"categoryName,omitempty" json:"categoryName,omitempty" xml:"categoryName,omitempty"`
	CategoryID      *int                 `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	CertCode        *int                 `form:"cert_code,omitempty" json:"cert_code,omitempty" xml:"cert_code,omitempty"`
	CertType        *int                 `form:"cert_type,omitempty" json:"cert_type,omitempty" xml:"cert_type,omitempty"`
	Colour          *string              `form:"colour,omitempty" json:"colour,omitempty" xml:"colour,omitempty"`
	ColourID        *int                 `form:"colour_id,omitempty" json:"colour_id,omitempty" xml:"colour_id,omitempty"`
	CreatedAt       *int                 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	Crowd           *string              `form:"crowd,omitempty" json:"crowd,omitempty" xml:"crowd,omitempty"`
	CurrentPrice    *int                 `form:"current_price,omitempty" json:"current_price,omitempty" xml:"current_price,omitempty"`
	EndTime         *int                 `form:"end_time,omitempty" json:"end_time,omitempty" xml:"end_time,omitempty"`
	DetailPics      []*MediaResponseBody `form:"detailPics,omitempty" json:"detailPics,omitempty" xml:"detailPics,omitempty"`
	ExtAttrMap      *int                 `form:"extAttrMap,omitempty" json:"extAttrMap,omitempty" xml:"extAttrMap,omitempty"`
	Level           *int                 `form:"level,omitempty" json:"level,omitempty" xml:"level,omitempty"`
	LevelID         *int                 `form:"level_id,omitempty" json:"level_id,omitempty" xml:"level_id,omitempty"`
	Name            *string              `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	MktPrice        *int                 `form:"mkt_price,omitempty" json:"mkt_price,omitempty" xml:"mkt_price,omitempty"`
	OperatorID      *int                 `form:"operator_id,omitempty" json:"operator_id,omitempty" xml:"operator_id,omitempty"`
	Recommendations *string              `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	Scenario        *string              `form:"scenario,omitempty" json:"scenario,omitempty" xml:"scenario,omitempty"`
	ScenarioList    []string             `form:"scenarioList,omitempty" json:"scenarioList,omitempty" xml:"scenarioList,omitempty"`
	Size            *string              `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	Status          *int                 `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	Style           *string              `form:"style,omitempty" json:"style,omitempty" xml:"style,omitempty"`
	StyleID         *string              `form:"style_id,omitempty" json:"style_id,omitempty" xml:"style_id,omitempty"`
	Summary         *string              `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	TemplateID      *int                 `form:"template_id,omitempty" json:"template_id,omitempty" xml:"template_id,omitempty"`
	UpdatedAt       *int                 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	Version         *int                 `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	Weight          *string              `form:"weight,omitempty" json:"weight,omitempty" xml:"weight,omitempty"`
}

// ProductNotFoundResponseBody is the type of the "product" service "product"
// endpoint HTTP response body for the "not_found" error.
type ProductNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing bottle
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MediaResponseBody is used to define fields on response body types.
type MediaResponseBody struct {
	// 图片URL
	MediaURL *string `form:"media_url,omitempty" json:"media_url,omitempty" xml:"media_url,omitempty"`
	// 媒体类型：0-图片，1-视频，2-未知
	MediaType *int `form:"media_type,omitempty" json:"media_type,omitempty" xml:"media_type,omitempty"`
	// 视频链接
	Content *int `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// 上传顺序，默认为0
	Sequence *int `form:"sequence,omitempty" json:"sequence,omitempty" xml:"sequence,omitempty"`
	// Id
	MediaID *int `form:"media_id,omitempty" json:"media_id,omitempty" xml:"media_id,omitempty"`
}

// NewProductViewOK builds a "product" service "product" endpoint result from a
// HTTP "OK" response.
func NewProductViewOK(body *ProductResponseBody) *productviews.ProductView {
	v := &productviews.ProductView{
		ID:              body.ID,
		ArtNo:           body.ArtNo,
		CategoryName:    body.CategoryName,
		CategoryID:      body.CategoryID,
		CertCode:        body.CertCode,
		CertType:        body.CertType,
		Colour:          body.Colour,
		ColourID:        body.ColourID,
		CreatedAt:       body.CreatedAt,
		Crowd:           body.Crowd,
		CurrentPrice:    body.CurrentPrice,
		EndTime:         body.EndTime,
		ExtAttrMap:      body.ExtAttrMap,
		Level:           body.Level,
		LevelID:         body.LevelID,
		Name:            body.Name,
		MktPrice:        body.MktPrice,
		OperatorID:      body.OperatorID,
		Recommendations: body.Recommendations,
		Scenario:        body.Scenario,
		Size:            body.Size,
		Status:          body.Status,
		Style:           body.Style,
		StyleID:         body.StyleID,
		Summary:         body.Summary,
		TemplateID:      body.TemplateID,
		UpdatedAt:       body.UpdatedAt,
		Version:         body.Version,
		Weight:          body.Weight,
	}
	if body.CarouselList != nil {
		v.CarouselList = make([]*productviews.MediaView, len(body.CarouselList))
		for i, val := range body.CarouselList {
			v.CarouselList[i] = unmarshalMediaResponseBodyToProductviewsMediaView(val)
		}
	}
	if body.DetailPics != nil {
		v.DetailPics = make([]*productviews.MediaView, len(body.DetailPics))
		for i, val := range body.DetailPics {
			v.DetailPics[i] = unmarshalMediaResponseBodyToProductviewsMediaView(val)
		}
	}
	if body.ScenarioList != nil {
		v.ScenarioList = make([]string, len(body.ScenarioList))
		for i, val := range body.ScenarioList {
			v.ScenarioList[i] = val
		}
	}
	return v
}

// NewProductNotFound builds a product service product endpoint not_found error.
func NewProductNotFound(body *ProductNotFoundResponseBody) *product.NotFound {
	v := &product.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// ValidateProductNotFoundResponseBody runs the validations defined on
// product_not_found_response_body
func ValidateProductNotFoundResponseBody(body *ProductNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}
