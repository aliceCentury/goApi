// Code generated by goa v3.0.4, DO NOT EDIT.
//
// product HTTP client encoders and decoders
//
// Command:
// $ goa gen calcsvc/design

package client

import (
	"bytes"
	product "calcsvc/gen/product"
	productviews "calcsvc/gen/product/views"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildProductEndpointRequest instantiates a HTTP request object with method
// and path set to call the "product" service "product" endpoint
func (c *Client) BuildProductEndpointRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*product.ProductPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("product", "product", "*product.ProductPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ProductEndpointProductPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("product", "product", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeProductEndpointResponse returns a decoder for responses returned by
// the product product endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeProductEndpointResponse may return the following errors:
//	- "not_found" (type *product.NotFound): http.StatusNotFound
//	- error: internal error
func DecodeProductEndpointResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ProductResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "product", err)
			}
			p := NewProductViewOK(&body)
			view := "default"
			vres := &productviews.Product{p, view}
			if err = productviews.ValidateProduct(vres); err != nil {
				return nil, goahttp.ErrValidationError("product", "product", err)
			}
			res := product.NewProduct(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ProductNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "product", err)
			}
			err = ValidateProductNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("product", "product", err)
			}
			return nil, NewProductNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("product", "product", resp.StatusCode, string(body))
		}
	}
}

// unmarshalMediaResponseBodyToProductviewsMediaView builds a value of type
// *productviews.MediaView from a value of type *MediaResponseBody.
func unmarshalMediaResponseBodyToProductviewsMediaView(v *MediaResponseBody) *productviews.MediaView {
	if v == nil {
		return nil
	}
	res := &productviews.MediaView{
		MediaURL:  v.MediaURL,
		MediaType: v.MediaType,
		Content:   v.Content,
		Sequence:  v.Sequence,
		MediaID:   v.MediaID,
	}

	return res
}
