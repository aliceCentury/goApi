// Code generated by goa v3.0.4, DO NOT EDIT.
//
// user HTTP server encoders and decoders
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	user "calcsvc/gen/user"
	userviews "calcsvc/gen/user/views"
	"context"
	"io"
	"net/http"
	"strconv"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListResponse returns an encoder for responses returned by the user
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(userviews.StoredBottleCollection)
		enc := encoder(ctx, w)
		body := NewStoredBottleResponseTinyCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeShowResponse returns an encoder for responses returned by the user
// show endpoint.
func EncodeShowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userviews.StoredBottle)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewShowResponseBody(res.Projected)
		case "tiny":
			body = NewShowResponseBodyTiny(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowRequest returns a decoder for requests sent to the user show
// endpoint.
func DecodeShowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id   string
			view *string
			err  error

			params = mux.Vars(r)
		)
		id = params["id"]
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewShowPayload(id, view)

		return payload, nil
	}
}

// EncodeShowError returns an encoder for errors returned by the show user
// endpoint.
func EncodeShowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*user.NotFound)
			enc := encoder(ctx, w)
			body := NewShowNotFoundResponseBody(res)
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeAddResponse returns an encoder for responses returned by the user add
// endpoint.
func EncodeAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeAddRequest returns a decoder for requests sent to the user add
// endpoint.
func DecodeAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AddRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAddBottle(&body)

		return payload, nil
	}
}

// EncodeRemoveResponse returns an encoder for responses returned by the user
// remove endpoint.
func EncodeRemoveResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeRemoveRequest returns a decoder for requests sent to the user remove
// endpoint.
func DecodeRemoveRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewRemovePayload(id)

		return payload, nil
	}
}

// EncodeRateResponse returns an encoder for responses returned by the user
// rate endpoint.
func EncodeRateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeRateRequest returns a decoder for requests sent to the user rate
// endpoint.
func DecodeRateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			query map[uint32][]string
			err   error
		)
		{
			queryRaw := r.URL.Query()
			if len(queryRaw) == 0 {
				err = goa.MergeErrors(err, goa.MissingFieldError("query", "query string"))
			}
			for keyRaw, valRaw := range queryRaw {
				if strings.HasPrefix(keyRaw, "query[") {
					if query == nil {
						query = make(map[uint32][]string)
					}
					var keya uint32
					{
						openIdx := strings.IndexRune(keyRaw, '[')
						closeIdx := strings.IndexRune(keyRaw, ']')
						keyaRaw := keyRaw[openIdx+1 : closeIdx]
						v, err2 := strconv.ParseUint(keyaRaw, 10, 32)
						if err2 != nil {
							err = goa.MergeErrors(err, goa.InvalidFieldTypeError("keya", keyaRaw, "unsigned integer"))
						}
						keya = uint32(v)
					}
					query[keya] = valRaw
				}
			}
		}
		if err != nil {
			return nil, err
		}
		payload := query

		return payload, nil
	}
}

// EncodeMultiAddResponse returns an encoder for responses returned by the user
// multi_add endpoint.
func EncodeMultiAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeMultiAddRequest returns a decoder for requests sent to the user
// multi_add endpoint.
func DecodeMultiAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var payload []*user.Bottle
		if err := decoder(r).Decode(&payload); err != nil {
			return nil, goa.DecodePayloadError(err.Error())
		}

		return payload, nil
	}
}

// NewUserMultiAddDecoder returns a decoder to decode the multipart request for
// the "user" service "multi_add" endpoint.
func NewUserMultiAddDecoder(mux goahttp.Muxer, userMultiAddDecoderFn UserMultiAddDecoderFunc) func(r *http.Request) goahttp.Decoder {
	return func(r *http.Request) goahttp.Decoder {
		return goahttp.EncodingFunc(func(v interface{}) error {
			mr, merr := r.MultipartReader()
			if merr != nil {
				return merr
			}
			p := v.(*[]*user.Bottle)
			if err := userMultiAddDecoderFn(mr, p); err != nil {
				return err
			}
			return nil
		})
	}
}

// EncodeMultiUpdateResponse returns an encoder for responses returned by the
// user multi_update endpoint.
func EncodeMultiUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeMultiUpdateRequest returns a decoder for requests sent to the user
// multi_update endpoint.
func DecodeMultiUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var payload *user.MultiUpdatePayload
		if err := decoder(r).Decode(&payload); err != nil {
			return nil, goa.DecodePayloadError(err.Error())
		}

		return payload, nil
	}
}

// NewUserMultiUpdateDecoder returns a decoder to decode the multipart request
// for the "user" service "multi_update" endpoint.
func NewUserMultiUpdateDecoder(mux goahttp.Muxer, userMultiUpdateDecoderFn UserMultiUpdateDecoderFunc) func(r *http.Request) goahttp.Decoder {
	return func(r *http.Request) goahttp.Decoder {
		return goahttp.EncodingFunc(func(v interface{}) error {
			mr, merr := r.MultipartReader()
			if merr != nil {
				return merr
			}
			p := v.(**user.MultiUpdatePayload)
			if err := userMultiUpdateDecoderFn(mr, p); err != nil {
				return err
			}

			var (
				ids []string
				err error
			)
			ids = r.URL.Query()["ids"]
			if ids == nil {
				err = goa.MergeErrors(err, goa.MissingFieldError("ids", "query string"))
			}
			if err != nil {
				return err
			}
			(*p).Ids = ids
			return nil
		})
	}
}

// marshalUserviewsWineryViewToWineryResponseTiny builds a value of type
// *WineryResponseTiny from a value of type *userviews.WineryView.
func marshalUserviewsWineryViewToWineryResponseTiny(v *userviews.WineryView) *WineryResponseTiny {
	res := &WineryResponseTiny{
		Name: *v.Name,
	}

	return res
}

// marshalUserviewsWineryViewToWineryResponseBodyTiny builds a value of type
// *WineryResponseBodyTiny from a value of type *userviews.WineryView.
func marshalUserviewsWineryViewToWineryResponseBodyTiny(v *userviews.WineryView) *WineryResponseBodyTiny {
	res := &WineryResponseBodyTiny{
		Name: *v.Name,
	}

	return res
}

// marshalUserviewsComponentViewToComponentResponseBody builds a value of type
// *ComponentResponseBody from a value of type *userviews.ComponentView.
func marshalUserviewsComponentViewToComponentResponseBody(v *userviews.ComponentView) *ComponentResponseBody {
	if v == nil {
		return nil
	}
	res := &ComponentResponseBody{
		Varietal:   *v.Varietal,
		Percentage: v.Percentage,
	}

	return res
}

// unmarshalWineryRequestBodyToUserWinery builds a value of type *user.Winery
// from a value of type *WineryRequestBody.
func unmarshalWineryRequestBodyToUserWinery(v *WineryRequestBody) *user.Winery {
	res := &user.Winery{
		Name:    *v.Name,
		Region:  *v.Region,
		Country: *v.Country,
		URL:     v.URL,
	}

	return res
}

// unmarshalComponentRequestBodyToUserComponent builds a value of type
// *user.Component from a value of type *ComponentRequestBody.
func unmarshalComponentRequestBodyToUserComponent(v *ComponentRequestBody) *user.Component {
	if v == nil {
		return nil
	}
	res := &user.Component{
		Varietal:   *v.Varietal,
		Percentage: v.Percentage,
	}

	return res
}

// unmarshalBottleRequestBodyToUserBottle builds a value of type *user.Bottle
// from a value of type *BottleRequestBody.
func unmarshalBottleRequestBodyToUserBottle(v *BottleRequestBody) *user.Bottle {
	res := &user.Bottle{
		Name:        *v.Name,
		Vintage:     *v.Vintage,
		Description: v.Description,
		Rating:      v.Rating,
	}
	res.Winery = unmarshalWineryRequestBodyToUserWinery(v.Winery)
	if v.Composition != nil {
		res.Composition = make([]*user.Component, len(v.Composition))
		for i, val := range v.Composition {
			res.Composition[i] = unmarshalComponentRequestBodyToUserComponent(val)
		}
	}

	return res
}
