// Code generated by goa v3.0.4, DO NOT EDIT.
//
// auction HTTP server encoders and decoders
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	auctionviews "calcsvc/gen/auction/views"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetAuctionProductListByStatusResponse returns an encoder for responses
// returned by the auction getAuctionProductListByStatus endpoint.
func EncodeGetAuctionProductListByStatusResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(auctionviews.AuctionProductCollection)
		enc := encoder(ctx, w)
		body := NewAuctionProductResponseAuctionListCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAuctionProductListByStatusRequest returns a decoder for requests
// sent to the auction getAuctionProductListByStatus endpoint.
func DecodeGetAuctionProductListByStatusRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body GetAuctionProductListByStatusRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewGetAuctionProductListByStatusListData(&body)

		return payload, nil
	}
}
