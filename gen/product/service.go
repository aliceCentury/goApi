// Code generated by goa v3.0.4, DO NOT EDIT.
//
// product service
//
// Command:
// $ goa gen calcsvc/design

package product

import (
	productviews "calcsvc/gen/product/views"
	"context"
)

// product service.
type Service interface {
	// 商品信息
	ProductEndpoint(context.Context, *ProductPayload) (res *Product, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "product"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"product"}

// ProductPayload is the payload type of the product service product method.
type ProductPayload struct {
	// auctionId
	ID string
}

// Product is the result type of the product service product method.
type Product struct {
	// 商品Id
	ID *int
	// 编号
	ArtNo           *string
	CarouselList    []*Media
	CategoryName    *string
	CategoryID      *int
	CertCode        *int
	CertType        *int
	Colour          *string
	ColourID        *int
	CreatedAt       *int
	Crowd           *string
	CurrentPrice    *int
	EndTime         *int
	DetailPics      []*Media
	ExtAttrMap      *int
	Level           *int
	LevelID         *int
	Name            *string
	MktPrice        *int
	OperatorID      *int
	Recommendations *string
	Scenario        *string
	ScenarioList    []string
	Size            *string
	Status          *int
	Style           *string
	StyleID         *string
	Summary         *string
	TemplateID      *int
	UpdatedAt       *int
	Version         *int
	Weight          *string
}

type Media struct {
	// 图片URL
	MediaURL *string
	// 媒体类型：0-图片，1-视频，2-未知
	MediaType *int
	// 视频链接
	Content *int
	// 上传顺序，默认为0
	Sequence *int
	// Id
	MediaID *int
}

// NotFound is the type returned when attempting to show or delete a bottle
// that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing bottle
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a bottle that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// NewProduct initializes result type Product from viewed result type Product.
func NewProduct(vres *productviews.Product) *Product {
	var res *Product
	switch vres.View {
	case "default", "":
		res = newProduct(vres.Projected)
	}
	return res
}

// NewViewedProduct initializes viewed result type Product from result type
// Product using the given view.
func NewViewedProduct(res *Product, view string) *productviews.Product {
	var vres *productviews.Product
	switch view {
	case "default", "":
		p := newProductView(res)
		vres = &productviews.Product{p, "default"}
	}
	return vres
}

// newProduct converts projected type Product to service type Product.
func newProduct(vres *productviews.ProductView) *Product {
	res := &Product{
		ID:              vres.ID,
		ArtNo:           vres.ArtNo,
		CategoryName:    vres.CategoryName,
		CategoryID:      vres.CategoryID,
		CertCode:        vres.CertCode,
		CertType:        vres.CertType,
		Colour:          vres.Colour,
		ColourID:        vres.ColourID,
		CreatedAt:       vres.CreatedAt,
		Crowd:           vres.Crowd,
		CurrentPrice:    vres.CurrentPrice,
		EndTime:         vres.EndTime,
		ExtAttrMap:      vres.ExtAttrMap,
		Level:           vres.Level,
		LevelID:         vres.LevelID,
		Name:            vres.Name,
		MktPrice:        vres.MktPrice,
		OperatorID:      vres.OperatorID,
		Recommendations: vres.Recommendations,
		Scenario:        vres.Scenario,
		Size:            vres.Size,
		Status:          vres.Status,
		Style:           vres.Style,
		StyleID:         vres.StyleID,
		Summary:         vres.Summary,
		TemplateID:      vres.TemplateID,
		UpdatedAt:       vres.UpdatedAt,
		Version:         vres.Version,
		Weight:          vres.Weight,
	}
	if vres.CarouselList != nil {
		res.CarouselList = make([]*Media, len(vres.CarouselList))
		for i, val := range vres.CarouselList {
			res.CarouselList[i] = transformProductviewsMediaViewToMedia(val)
		}
	}
	if vres.DetailPics != nil {
		res.DetailPics = make([]*Media, len(vres.DetailPics))
		for i, val := range vres.DetailPics {
			res.DetailPics[i] = transformProductviewsMediaViewToMedia(val)
		}
	}
	if vres.ScenarioList != nil {
		res.ScenarioList = make([]string, len(vres.ScenarioList))
		for i, val := range vres.ScenarioList {
			res.ScenarioList[i] = val
		}
	}
	return res
}

// newProductView projects result type Product to projected type ProductView
// using the "default" view.
func newProductView(res *Product) *productviews.ProductView {
	vres := &productviews.ProductView{
		ID:              res.ID,
		ArtNo:           res.ArtNo,
		CategoryName:    res.CategoryName,
		CategoryID:      res.CategoryID,
		CertCode:        res.CertCode,
		CertType:        res.CertType,
		Colour:          res.Colour,
		ColourID:        res.ColourID,
		CreatedAt:       res.CreatedAt,
		Crowd:           res.Crowd,
		CurrentPrice:    res.CurrentPrice,
		EndTime:         res.EndTime,
		ExtAttrMap:      res.ExtAttrMap,
		Level:           res.Level,
		LevelID:         res.LevelID,
		Name:            res.Name,
		MktPrice:        res.MktPrice,
		OperatorID:      res.OperatorID,
		Recommendations: res.Recommendations,
		Scenario:        res.Scenario,
		Size:            res.Size,
		Status:          res.Status,
		Style:           res.Style,
		StyleID:         res.StyleID,
		Summary:         res.Summary,
		TemplateID:      res.TemplateID,
		UpdatedAt:       res.UpdatedAt,
		Version:         res.Version,
		Weight:          res.Weight,
	}
	if res.CarouselList != nil {
		vres.CarouselList = make([]*productviews.MediaView, len(res.CarouselList))
		for i, val := range res.CarouselList {
			vres.CarouselList[i] = transformMediaToProductviewsMediaView(val)
		}
	}
	if res.DetailPics != nil {
		vres.DetailPics = make([]*productviews.MediaView, len(res.DetailPics))
		for i, val := range res.DetailPics {
			vres.DetailPics[i] = transformMediaToProductviewsMediaView(val)
		}
	}
	if res.ScenarioList != nil {
		vres.ScenarioList = make([]string, len(res.ScenarioList))
		for i, val := range res.ScenarioList {
			vres.ScenarioList[i] = val
		}
	}
	return vres
}

// transformProductviewsMediaViewToMedia builds a value of type *Media from a
// value of type *productviews.MediaView.
func transformProductviewsMediaViewToMedia(v *productviews.MediaView) *Media {
	if v == nil {
		return nil
	}
	res := &Media{
		MediaURL:  v.MediaURL,
		MediaType: v.MediaType,
		Content:   v.Content,
		Sequence:  v.Sequence,
		MediaID:   v.MediaID,
	}

	return res
}

// transformMediaToProductviewsMediaView builds a value of type
// *productviews.MediaView from a value of type *Media.
func transformMediaToProductviewsMediaView(v *Media) *productviews.MediaView {
	if v == nil {
		return nil
	}
	res := &productviews.MediaView{
		MediaURL:  v.MediaURL,
		MediaType: v.MediaType,
		Content:   v.Content,
		Sequence:  v.Sequence,
		MediaID:   v.MediaID,
	}

	return res
}
