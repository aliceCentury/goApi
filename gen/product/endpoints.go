// Code generated by goa v3.0.4, DO NOT EDIT.
//
// product endpoints
//
// Command:
// $ goa gen calcsvc/design

package product

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "product" service endpoints.
type Endpoints struct {
	ProductEndpoint goa.Endpoint
}

// NewEndpoints wraps the methods of the "product" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ProductEndpoint: NewProductEndpointEndpoint(s),
	}
}

// Use applies the given middleware to all the "product" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ProductEndpoint = m(e.ProductEndpoint)
}

// NewProductEndpointEndpoint returns an endpoint function that calls the
// method "product" of service "product".
func NewProductEndpointEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ProductPayload)
		res, err := s.ProductEndpoint(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedProduct(res, "default")
		return vres, nil
	}
}
