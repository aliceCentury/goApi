// Code generated by goa v3.0.4, DO NOT EDIT.
//
// user gRPC server
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	userpb "calcsvc/gen/grpc/user/pb"
	user "calcsvc/gen/user"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the userpb.UserServer interface.
type Server struct {
	ListH        goagrpc.UnaryHandler
	ShowH        goagrpc.UnaryHandler
	AddH         goagrpc.UnaryHandler
	RemoveH      goagrpc.UnaryHandler
	RateH        goagrpc.UnaryHandler
	MultiAddH    goagrpc.UnaryHandler
	MultiUpdateH goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the user service endpoints.
func New(e *user.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		ListH:        NewListHandler(e.List, uh),
		ShowH:        NewShowHandler(e.Show, uh),
		AddH:         NewAddHandler(e.Add, uh),
		RemoveH:      NewRemoveHandler(e.Remove, uh),
		RateH:        NewRateHandler(e.Rate, uh),
		MultiAddH:    NewMultiAddHandler(e.MultiAdd, uh),
		MultiUpdateH: NewMultiUpdateHandler(e.MultiUpdate, uh),
	}
}

// NewListHandler creates a gRPC handler which serves the "user" service "list"
// endpoint.
func NewListHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeListResponse)
	}
	return h
}

// List implements the "List" method in userpb.UserServer interface.
func (s *Server) List(ctx context.Context, message *userpb.ListRequest) (*userpb.StoredBottleCollection, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "list")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.ListH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.StoredBottleCollection), nil
}

// NewShowHandler creates a gRPC handler which serves the "user" service "show"
// endpoint.
func NewShowHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeShowRequest, EncodeShowResponse)
	}
	return h
}

// Show implements the "Show" method in userpb.UserServer interface.
func (s *Server) Show(ctx context.Context, message *userpb.ShowRequest) (*userpb.ShowResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "show")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.ShowH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "not_found":
				er := err.(*user.NotFound)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewShowNotFoundError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.ShowResponse), nil
}

// NewAddHandler creates a gRPC handler which serves the "user" service "add"
// endpoint.
func NewAddHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAddRequest, EncodeAddResponse)
	}
	return h
}

// Add implements the "Add" method in userpb.UserServer interface.
func (s *Server) Add(ctx context.Context, message *userpb.AddRequest) (*userpb.AddResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "add")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.AddH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.AddResponse), nil
}

// NewRemoveHandler creates a gRPC handler which serves the "user" service
// "remove" endpoint.
func NewRemoveHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRemoveRequest, EncodeRemoveResponse)
	}
	return h
}

// Remove implements the "Remove" method in userpb.UserServer interface.
func (s *Server) Remove(ctx context.Context, message *userpb.RemoveRequest) (*userpb.RemoveResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "remove")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.RemoveH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.RemoveResponse), nil
}

// NewRateHandler creates a gRPC handler which serves the "user" service "rate"
// endpoint.
func NewRateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRateRequest, EncodeRateResponse)
	}
	return h
}

// Rate implements the "Rate" method in userpb.UserServer interface.
func (s *Server) Rate(ctx context.Context, message *userpb.RateRequest) (*userpb.RateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "rate")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.RateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.RateResponse), nil
}

// NewMultiAddHandler creates a gRPC handler which serves the "user" service
// "multi_add" endpoint.
func NewMultiAddHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeMultiAddRequest, EncodeMultiAddResponse)
	}
	return h
}

// MultiAdd implements the "MultiAdd" method in userpb.UserServer interface.
func (s *Server) MultiAdd(ctx context.Context, message *userpb.MultiAddRequest) (*userpb.MultiAddResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "multi_add")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.MultiAddH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.MultiAddResponse), nil
}

// NewMultiUpdateHandler creates a gRPC handler which serves the "user" service
// "multi_update" endpoint.
func NewMultiUpdateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeMultiUpdateRequest, EncodeMultiUpdateResponse)
	}
	return h
}

// MultiUpdate implements the "MultiUpdate" method in userpb.UserServer
// interface.
func (s *Server) MultiUpdate(ctx context.Context, message *userpb.MultiUpdateRequest) (*userpb.MultiUpdateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "multi_update")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.MultiUpdateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.MultiUpdateResponse), nil
}
