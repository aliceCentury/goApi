// Code generated by goa v3.0.4, DO NOT EDIT.
//
// user gRPC client CLI support package
//
// Command:
// $ goa gen calcsvc/design

package client

import (
	userpb "calcsvc/gen/grpc/user/pb"
	user "calcsvc/gen/user"
	"encoding/json"
	"fmt"
)

// BuildShowPayload builds the payload for the user show endpoint from CLI
// flags.
func BuildShowPayload(userShowMessage string, userShowView string) (*user.ShowPayload, error) {
	var err error
	var message userpb.ShowRequest
	{
		if userShowMessage != "" {
			err = json.Unmarshal([]byte(userShowMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": \"Soluta minus.\"\n   }'")
			}
		}
	}
	var view *string
	{
		if userShowView != "" {
			view = &userShowView
		}
	}
	v := &user.ShowPayload{
		ID: message.Id,
	}
	v.View = view
	return v, nil
}

// BuildAddPayload builds the payload for the user add endpoint from CLI flags.
func BuildAddPayload(userAddMessage string) (*user.Bottle, error) {
	var err error
	var message userpb.AddRequest
	{
		if userAddMessage != "" {
			err = json.Unmarshal([]byte(userAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"composition\": [\n         {\n            \"percentage\": 73,\n            \"varietal\": \"Syrah\"\n         },\n         {\n            \"percentage\": 73,\n            \"varietal\": \"Syrah\"\n         }\n      ],\n      \"description\": \"Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah\",\n      \"name\": \"Blue\\'s Cuvee\",\n      \"rating\": 4,\n      \"vintage\": 1977,\n      \"winery\": {\n         \"country\": \"USA\",\n         \"name\": \"Longoria\",\n         \"region\": \"Central Coast, California\",\n         \"url\": \"http://www.longoriawine.com/\"\n      }\n   }'")
			}
		}
	}
	v := &user.Bottle{
		Name:    message.Name,
		Vintage: message.Vintage,
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	if message.Rating != 0 {
		v.Rating = &message.Rating
	}
	if message.Winery != nil {
		v.Winery = protobufUserpbWineryToUserWinery(message.Winery)
	}
	if message.Composition != nil {
		v.Composition = make([]*user.Component, len(message.Composition))
		for i, val := range message.Composition {
			v.Composition[i] = &user.Component{
				Varietal: val.Varietal,
			}
			if val.Percentage != 0 {
				v.Composition[i].Percentage = &val.Percentage
			}
		}
	}
	return v, nil
}

// BuildRemovePayload builds the payload for the user remove endpoint from CLI
// flags.
func BuildRemovePayload(userRemoveMessage string) (*user.RemovePayload, error) {
	var err error
	var message userpb.RemoveRequest
	{
		if userRemoveMessage != "" {
			err = json.Unmarshal([]byte(userRemoveMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": \"Ut molestiae possimus.\"\n   }'")
			}
		}
	}
	v := &user.RemovePayload{
		ID: message.Id,
	}
	return v, nil
}

// BuildRatePayload builds the payload for the user rate endpoint from CLI
// flags.
func BuildRatePayload(userRateMessage string) (map[uint32][]string, error) {
	var err error
	var message userpb.RateRequest
	{
		if userRateMessage != "" {
			err = json.Unmarshal([]byte(userRateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"field\": {\n         \"3506298606\": {\n            \"field\": [\n               \"Beatae veniam quaerat sint.\",\n               \"Error sit qui ut delectus nihil sunt.\",\n               \"Architecto magni eos tempora sapiente.\",\n               \"Est beatae eveniet et tempora nobis enim.\"\n            ]\n         }\n      }\n   }'")
			}
		}
	}
	v := make(map[uint32][]string, len(message.Field))
	for key, val := range message.Field {
		tk := key
		tv := make([]string, len(val.Field))
		for i, val := range val.Field {
			tv[i] = val
		}
		v[tk] = tv
	}
	return v, nil
}

// BuildMultiAddPayload builds the payload for the user multi_add endpoint from
// CLI flags.
func BuildMultiAddPayload(userMultiAddMessage string) ([]*user.Bottle, error) {
	var err error
	var message userpb.MultiAddRequest
	{
		if userMultiAddMessage != "" {
			err = json.Unmarshal([]byte(userMultiAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"field\": [\n         {\n            \"composition\": [\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               },\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               }\n            ],\n            \"description\": \"Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah\",\n            \"name\": \"Blue\\'s Cuvee\",\n            \"rating\": 2,\n            \"vintage\": 2005,\n            \"winery\": {\n               \"country\": \"USA\",\n               \"name\": \"Longoria\",\n               \"region\": \"Central Coast, California\",\n               \"url\": \"http://www.longoriawine.com/\"\n            }\n         },\n         {\n            \"composition\": [\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               },\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               }\n            ],\n            \"description\": \"Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah\",\n            \"name\": \"Blue\\'s Cuvee\",\n            \"rating\": 2,\n            \"vintage\": 2005,\n            \"winery\": {\n               \"country\": \"USA\",\n               \"name\": \"Longoria\",\n               \"region\": \"Central Coast, California\",\n               \"url\": \"http://www.longoriawine.com/\"\n            }\n         },\n         {\n            \"composition\": [\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               },\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               }\n            ],\n            \"description\": \"Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah\",\n            \"name\": \"Blue\\'s Cuvee\",\n            \"rating\": 2,\n            \"vintage\": 2005,\n            \"winery\": {\n               \"country\": \"USA\",\n               \"name\": \"Longoria\",\n               \"region\": \"Central Coast, California\",\n               \"url\": \"http://www.longoriawine.com/\"\n            }\n         },\n         {\n            \"composition\": [\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               },\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               }\n            ],\n            \"description\": \"Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah\",\n            \"name\": \"Blue\\'s Cuvee\",\n            \"rating\": 2,\n            \"vintage\": 2005,\n            \"winery\": {\n               \"country\": \"USA\",\n               \"name\": \"Longoria\",\n               \"region\": \"Central Coast, California\",\n               \"url\": \"http://www.longoriawine.com/\"\n            }\n         }\n      ]\n   }'")
			}
		}
	}
	v := make([]*user.Bottle, len(message.Field))
	for i, val := range message.Field {
		v[i] = &user.Bottle{
			Name:    val.Name,
			Vintage: val.Vintage,
		}
		if val.Description != "" {
			v[i].Description = &val.Description
		}
		if val.Rating != 0 {
			v[i].Rating = &val.Rating
		}
		if val.Winery != nil {
			v[i].Winery = protobufUserpbWineryToUserWinery(val.Winery)
		}
		if val.Composition != nil {
			v[i].Composition = make([]*user.Component, len(val.Composition))
			for j, val := range val.Composition {
				v[i].Composition[j] = &user.Component{
					Varietal: val.Varietal,
				}
				if val.Percentage != 0 {
					v[i].Composition[j].Percentage = &val.Percentage
				}
			}
		}
	}
	return v, nil
}

// BuildMultiUpdatePayload builds the payload for the user multi_update
// endpoint from CLI flags.
func BuildMultiUpdatePayload(userMultiUpdateMessage string) (*user.MultiUpdatePayload, error) {
	var err error
	var message userpb.MultiUpdateRequest
	{
		if userMultiUpdateMessage != "" {
			err = json.Unmarshal([]byte(userMultiUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"bottles\": [\n         {\n            \"composition\": [\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               },\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               }\n            ],\n            \"description\": \"Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah\",\n            \"name\": \"Blue\\'s Cuvee\",\n            \"rating\": 2,\n            \"vintage\": 2005,\n            \"winery\": {\n               \"country\": \"USA\",\n               \"name\": \"Longoria\",\n               \"region\": \"Central Coast, California\",\n               \"url\": \"http://www.longoriawine.com/\"\n            }\n         },\n         {\n            \"composition\": [\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               },\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               }\n            ],\n            \"description\": \"Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah\",\n            \"name\": \"Blue\\'s Cuvee\",\n            \"rating\": 2,\n            \"vintage\": 2005,\n            \"winery\": {\n               \"country\": \"USA\",\n               \"name\": \"Longoria\",\n               \"region\": \"Central Coast, California\",\n               \"url\": \"http://www.longoriawine.com/\"\n            }\n         },\n         {\n            \"composition\": [\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               },\n               {\n                  \"percentage\": 73,\n                  \"varietal\": \"Syrah\"\n               }\n            ],\n            \"description\": \"Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah\",\n            \"name\": \"Blue\\'s Cuvee\",\n            \"rating\": 2,\n            \"vintage\": 2005,\n            \"winery\": {\n               \"country\": \"USA\",\n               \"name\": \"Longoria\",\n               \"region\": \"Central Coast, California\",\n               \"url\": \"http://www.longoriawine.com/\"\n            }\n         }\n      ],\n      \"ids\": [\n         \"Ea praesentium repudiandae quia.\",\n         \"Temporibus ut dicta.\",\n         \"Est quia corrupti saepe.\",\n         \"Facere harum dolores adipisci repellat.\"\n      ]\n   }'")
			}
		}
	}
	v := &user.MultiUpdatePayload{}
	if message.Ids != nil {
		v.Ids = make([]string, len(message.Ids))
		for i, val := range message.Ids {
			v.Ids[i] = val
		}
	}
	if message.Bottles != nil {
		v.Bottles = make([]*user.Bottle, len(message.Bottles))
		for i, val := range message.Bottles {
			v.Bottles[i] = &user.Bottle{
				Name:    val.Name,
				Vintage: val.Vintage,
			}
			if val.Description != "" {
				v.Bottles[i].Description = &val.Description
			}
			if val.Rating != 0 {
				v.Bottles[i].Rating = &val.Rating
			}
			if val.Winery != nil {
				v.Bottles[i].Winery = protobufUserpbWineryToUserWinery(val.Winery)
			}
			if val.Composition != nil {
				v.Bottles[i].Composition = make([]*user.Component, len(val.Composition))
				for j, val := range val.Composition {
					v.Bottles[i].Composition[j] = &user.Component{
						Varietal: val.Varietal,
					}
					if val.Percentage != 0 {
						v.Bottles[i].Composition[j].Percentage = &val.Percentage
					}
				}
			}
		}
	}
	return v, nil
}
