// Code generated by goa v3.0.4, DO NOT EDIT.
//
// user gRPC client encoders and decoders
//
// Command:
// $ goa gen calcsvc/design

package client

import (
	userpb "calcsvc/gen/grpc/user/pb"
	user "calcsvc/gen/user"
	userviews "calcsvc/gen/user/views"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildListFunc builds the remote method to invoke for "user" service "list"
// endpoint.
func BuildListFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*userpb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &userpb.ListRequest{}, opts...)
	}
}

// DecodeListResponse decodes responses from the user list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userpb.StoredBottleCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "list", "*userpb.StoredBottleCollection", v)
	}
	res := NewListResult(message)
	vres := userviews.StoredBottleCollection{Projected: res, View: view}
	if err := userviews.ValidateStoredBottleCollection(vres); err != nil {
		return nil, err
	}
	return user.NewStoredBottleCollection(vres), nil
}

// BuildShowFunc builds the remote method to invoke for "user" service "show"
// endpoint.
func BuildShowFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Show(ctx, reqpb.(*userpb.ShowRequest), opts...)
		}
		return grpccli.Show(ctx, &userpb.ShowRequest{}, opts...)
	}
}

// EncodeShowRequest encodes requests sent to user show endpoint.
func EncodeShowRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.ShowPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "show", "*user.ShowPayload", v)
	}
	if payload.View != nil {
		(*md).Append("view", *payload.View)
	}
	return NewShowRequest(payload), nil
}

// DecodeShowResponse decodes responses from the user show endpoint.
func DecodeShowResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userpb.ShowResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "show", "*userpb.ShowResponse", v)
	}
	res := NewShowResult(message)
	vres := &userviews.StoredBottle{Projected: res, View: view}
	if err := userviews.ValidateStoredBottle(vres); err != nil {
		return nil, err
	}
	return user.NewStoredBottle(vres), nil
}

// BuildAddFunc builds the remote method to invoke for "user" service "add"
// endpoint.
func BuildAddFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*userpb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &userpb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to user add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.Bottle)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "add", "*user.Bottle", v)
	}
	return NewAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the user add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*userpb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "add", "*userpb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}

// BuildRemoveFunc builds the remote method to invoke for "user" service
// "remove" endpoint.
func BuildRemoveFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Remove(ctx, reqpb.(*userpb.RemoveRequest), opts...)
		}
		return grpccli.Remove(ctx, &userpb.RemoveRequest{}, opts...)
	}
}

// EncodeRemoveRequest encodes requests sent to user remove endpoint.
func EncodeRemoveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.RemovePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "remove", "*user.RemovePayload", v)
	}
	return NewRemoveRequest(payload), nil
}

// BuildRateFunc builds the remote method to invoke for "user" service "rate"
// endpoint.
func BuildRateFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Rate(ctx, reqpb.(*userpb.RateRequest), opts...)
		}
		return grpccli.Rate(ctx, &userpb.RateRequest{}, opts...)
	}
}

// EncodeRateRequest encodes requests sent to user rate endpoint.
func EncodeRateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(map[uint32][]string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "rate", "map[uint32][]string", v)
	}
	return NewRateRequest(payload), nil
}

// BuildMultiAddFunc builds the remote method to invoke for "user" service
// "multi_add" endpoint.
func BuildMultiAddFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.MultiAdd(ctx, reqpb.(*userpb.MultiAddRequest), opts...)
		}
		return grpccli.MultiAdd(ctx, &userpb.MultiAddRequest{}, opts...)
	}
}

// EncodeMultiAddRequest encodes requests sent to user multi_add endpoint.
func EncodeMultiAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.([]*user.Bottle)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "multi_add", "[]*user.Bottle", v)
	}
	return NewMultiAddRequest(payload), nil
}

// DecodeMultiAddResponse decodes responses from the user multi_add endpoint.
func DecodeMultiAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*userpb.MultiAddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "multi_add", "*userpb.MultiAddResponse", v)
	}
	if err := ValidateMultiAddResponse(message); err != nil {
		return nil, err
	}
	res := NewMultiAddResult(message)
	return res, nil
}

// BuildMultiUpdateFunc builds the remote method to invoke for "user" service
// "multi_update" endpoint.
func BuildMultiUpdateFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.MultiUpdate(ctx, reqpb.(*userpb.MultiUpdateRequest), opts...)
		}
		return grpccli.MultiUpdate(ctx, &userpb.MultiUpdateRequest{}, opts...)
	}
}

// EncodeMultiUpdateRequest encodes requests sent to user multi_update endpoint.
func EncodeMultiUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.MultiUpdatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "multi_update", "*user.MultiUpdatePayload", v)
	}
	return NewMultiUpdateRequest(payload), nil
}
