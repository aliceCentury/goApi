// Code generated by goa v3.0.4, DO NOT EDIT.
//
// auction gRPC client CLI support package
//
// Command:
// $ goa gen calcsvc/design

package client

import (
	auction "calcsvc/gen/auction"
	auctionpb "calcsvc/gen/grpc/auction/pb"
	"encoding/json"
	"fmt"
)

// BuildGetAuctionProductListByStatusPayload builds the payload for the auction
// getAuctionProductListByStatus endpoint from CLI flags.
func BuildGetAuctionProductListByStatusPayload(auctionGetAuctionProductListByStatusMessage string) (*auction.ListData, error) {
	var err error
	var message auctionpb.GetAuctionProductListByStatusRequest
	{
		if auctionGetAuctionProductListByStatusMessage != "" {
			err = json.Unmarshal([]byte(auctionGetAuctionProductListByStatusMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"auction_status\": 2,\n      \"current_page\": 1,\n      \"page_size\": 30\n   }'")
			}
		}
	}
	v := &auction.ListData{}
	if message.AuctionStatus != 0 {
		auctionStatusptr := int(message.AuctionStatus)
		v.AuctionStatus = &auctionStatusptr
	}
	if message.CurrentPage != 0 {
		currentPageptr := int(message.CurrentPage)
		v.CurrentPage = &currentPageptr
	}
	if message.PageSize != 0 {
		pageSizeptr := int(message.PageSize)
		v.PageSize = &pageSizeptr
	}
	return v, nil
}
