// Code generated by goa v3.0.4, DO NOT EDIT.
//
// auction gRPC client encoders and decoders
//
// Command:
// $ goa gen calcsvc/design

package client

import (
	auction "calcsvc/gen/auction"
	auctionviews "calcsvc/gen/auction/views"
	auctionpb "calcsvc/gen/grpc/auction/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildPickFunc builds the remote method to invoke for "auction" service
// "pick" endpoint.
func BuildPickFunc(grpccli auctionpb.AuctionClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Pick(ctx, reqpb.(*auctionpb.PickRequest), opts...)
		}
		return grpccli.Pick(ctx, &auctionpb.PickRequest{}, opts...)
	}
}

// EncodePickRequest encodes requests sent to auction pick endpoint.
func EncodePickRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*auction.Criteria)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auction", "pick", "*auction.Criteria", v)
	}
	return NewPickRequest(payload), nil
}

// DecodePickResponse decodes responses from the auction pick endpoint.
func DecodePickResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*auctionpb.StoredBottleCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auction", "pick", "*auctionpb.StoredBottleCollection", v)
	}
	res := NewPickResult(message)
	vres := auctionviews.StoredBottleCollection{Projected: res, View: view}
	if err := auctionviews.ValidateStoredBottleCollection(vres); err != nil {
		return nil, err
	}
	return auction.NewStoredBottleCollection(vres), nil
}

// BuildGetFunc builds the remote method to invoke for "auction" service "get"
// endpoint.
func BuildGetFunc(grpccli auctionpb.AuctionClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*auctionpb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &auctionpb.GetRequest{}, opts...)
	}
}

// DecodeGetResponse decodes responses from the auction get endpoint.
func DecodeGetResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*auctionpb.StoredBottleCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auction", "get", "*auctionpb.StoredBottleCollection", v)
	}
	res := NewGetResult(message)
	vres := auctionviews.StoredBottleCollection{Projected: res, View: view}
	if err := auctionviews.ValidateStoredBottleCollection(vres); err != nil {
		return nil, err
	}
	return auction.NewStoredBottleCollection(vres), nil
}
