// Code generated by goa v3.0.4, DO NOT EDIT.
//
// auction gRPC server types
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	auction "calcsvc/gen/auction"
	auctionviews "calcsvc/gen/auction/views"
	auctionpb "calcsvc/gen/grpc/auction/pb"
)

// NewGetAuctionProductListByStatusPayload builds the payload of the
// "getAuctionProductListByStatus" endpoint of the "auction" service from the
// gRPC request type.
func NewGetAuctionProductListByStatusPayload(message *auctionpb.GetAuctionProductListByStatusRequest) *auction.ListData {
	v := &auction.ListData{}
	if message.AuctionStatus != 0 {
		auctionStatusptr := int(message.AuctionStatus)
		v.AuctionStatus = &auctionStatusptr
	}
	if message.CurrentPage != 0 {
		currentPageptr := int(message.CurrentPage)
		v.CurrentPage = &currentPageptr
	}
	if message.PageSize != 0 {
		pageSizeptr := int(message.PageSize)
		v.PageSize = &pageSizeptr
	}
	return v
}

// NewAuctionProductCollection builds the gRPC response type from the result of
// the "getAuctionProductListByStatus" endpoint of the "auction" service.
func NewAuctionProductCollection(result auctionviews.AuctionProductCollectionView) *auctionpb.AuctionProductCollection {
	message := &auctionpb.AuctionProductCollection{}
	message.Field = make([]*auctionpb.AuctionProduct, len(result))
	for i, val := range result {
		message.Field[i] = &auctionpb.AuctionProduct{}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.AddPrice != nil {
			message.Field[i].AddPrice = int32(*val.AddPrice)
		}
		if val.ArtNo != nil {
			message.Field[i].ArtNo = *val.ArtNo
		}
		if val.AuctionStatus != nil {
			message.Field[i].AuctionStatus = int32(*val.AuctionStatus)
		}
		if val.AuctionType != nil {
			message.Field[i].AuctionType = int32(*val.AuctionType)
		}
		if val.BidSceneID != nil {
			message.Field[i].BidSceneId = int32(*val.BidSceneID)
		}
		if val.BondPrice != nil {
			message.Field[i].BondPrice = int32(*val.BondPrice)
		}
		if val.BuyNumber != nil {
			message.Field[i].BuyNumber = int32(*val.BuyNumber)
		}
		if val.BuyUnitPrice != nil {
			message.Field[i].BuyUnitPrice = *val.BuyUnitPrice
		}
		if val.BuyoutPrice != nil {
			message.Field[i].BuyoutPrice = int32(*val.BuyoutPrice)
		}
		if val.CapPrice != nil {
			message.Field[i].CapPrice = int32(*val.CapPrice)
		}
		if val.CrowdfundingPackageID != nil {
			message.Field[i].CrowdfundingPackageId = *val.CrowdfundingPackageID
		}
		if val.CurrentPrice != nil {
			message.Field[i].CurrentPrice = int32(*val.CurrentPrice)
		}
		if val.EndTime != nil {
			message.Field[i].EndTime = *val.EndTime
		}
		if val.HeadPortrait != nil {
			message.Field[i].HeadPortrait = *val.HeadPortrait
		}
		if val.IsHaveProxy != nil {
			message.Field[i].IsHaveProxy = int32(*val.IsHaveProxy)
		}
		if val.IsReservePrice != nil {
			message.Field[i].IsReservePrice = int32(*val.IsReservePrice)
		}
		if val.LastTime != nil {
			message.Field[i].LastTime = *val.LastTime
		}
		if val.LimitNumber != nil {
			message.Field[i].LimitNumber = int32(*val.LimitNumber)
		}
		if val.MktPrice != nil {
			message.Field[i].MktPrice = int32(*val.MktPrice)
		}
		if val.PicturesURL != nil {
			message.Field[i].PicturesUrl = *val.PicturesURL
		}
		if val.ProdID != nil {
			message.Field[i].ProdId = *val.ProdID
		}
		if val.ProdName != nil {
			message.Field[i].ProdName = *val.ProdName
		}
		if val.QrURL != nil {
			message.Field[i].QrUrl = *val.QrURL
		}
		if val.RemindTime != nil {
			message.Field[i].RemindTime = *val.RemindTime
		}
		if val.ReservePrice != nil {
			message.Field[i].ReservePrice = *val.ReservePrice
		}
		if val.ResultStatus != nil {
			message.Field[i].ResultStatus = int32(*val.ResultStatus)
		}
		if val.RuleID != nil {
			message.Field[i].RuleId = int32(*val.RuleID)
		}
		if val.SerialNum != nil {
			message.Field[i].SerialNum = *val.SerialNum
		}
		if val.ShareURL != nil {
			message.Field[i].ShareUrl = *val.ShareURL
		}
		if val.StartAuctionPrice != nil {
			message.Field[i].StartAuctionPrice = int32(*val.StartAuctionPrice)
		}
		if val.StartTime != nil {
			message.Field[i].StartTime = *val.StartTime
		}
		if val.Title != nil {
			message.Field[i].Title = *val.Title
		}
		if val.TotalNumber != nil {
			message.Field[i].TotalNumber = int32(*val.TotalNumber)
		}
		if val.TransactionNumber != nil {
			message.Field[i].TransactionNumber = int32(*val.TransactionNumber)
		}
		if val.TransactionPrice != nil {
			message.Field[i].TransactionPrice = *val.TransactionPrice
		}
		if val.UserID != nil {
			message.Field[i].UserId = *val.UserID
		}
		if val.UserName != nil {
			message.Field[i].UserName = *val.UserName
		}
	}
	return message
}
