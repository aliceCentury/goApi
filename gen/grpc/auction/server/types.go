// Code generated by goa v3.0.4, DO NOT EDIT.
//
// auction gRPC server types
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	auction "calcsvc/gen/auction"
	auctionviews "calcsvc/gen/auction/views"
	auctionpb "calcsvc/gen/grpc/auction/pb"
)

// NewPickPayload builds the payload of the "pick" endpoint of the "auction"
// service from the gRPC request type.
func NewPickPayload(message *auctionpb.PickRequest) *auction.Criteria {
	v := &auction.Criteria{}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Winery != "" {
		v.Winery = &message.Winery
	}
	if message.Varietal != nil {
		v.Varietal = make([]string, len(message.Varietal))
		for i, val := range message.Varietal {
			v.Varietal[i] = val
		}
	}
	return v
}

// NewStoredBottleCollection builds the gRPC response type from the result of
// the "pick" endpoint of the "auction" service.
func NewStoredBottleCollection(result auctionviews.StoredBottleCollectionView) *auctionpb.StoredBottleCollection {
	message := &auctionpb.StoredBottleCollection{}
	message.Field = make([]*auctionpb.StoredBottle, len(result))
	for i, val := range result {
		message.Field[i] = &auctionpb.StoredBottle{}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.Name != nil {
			message.Field[i].Name = *val.Name
		}
		if val.Vintage != nil {
			message.Field[i].Vintage = *val.Vintage
		}
		if val.Description != nil {
			message.Field[i].Description = *val.Description
		}
		if val.Rating != nil {
			message.Field[i].Rating = *val.Rating
		}
		if val.Winery != nil {
			message.Field[i].Winery = svcAuctionviewsWineryViewToAuctionpbWinery(val.Winery)
		}
		if val.Composition != nil {
			message.Field[i].Composition = make([]*auctionpb.Component, len(val.Composition))
			for j, val := range val.Composition {
				message.Field[i].Composition[j] = &auctionpb.Component{}
				if val.Varietal != nil {
					message.Field[i].Composition[j].Varietal = *val.Varietal
				}
				if val.Percentage != nil {
					message.Field[i].Composition[j].Percentage = *val.Percentage
				}
			}
		}
	}
	return message
}

// svcAuctionviewsWineryViewToAuctionpbWinery builds a value of type
// *auctionpb.Winery from a value of type *auctionviews.WineryView.
func svcAuctionviewsWineryViewToAuctionpbWinery(v *auctionviews.WineryView) *auctionpb.Winery {
	res := &auctionpb.Winery{}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.Region != nil {
		res.Region = *v.Region
	}
	if v.Country != nil {
		res.Country = *v.Country
	}
	if v.URL != nil {
		res.Url = *v.URL
	}

	return res
}

// protobufAuctionpbWineryToAuctionviewsWineryView builds a value of type
// *auctionviews.WineryView from a value of type *auctionpb.Winery.
func protobufAuctionpbWineryToAuctionviewsWineryView(v *auctionpb.Winery) *auctionviews.WineryView {
	res := &auctionviews.WineryView{
		Name:    &v.Name,
		Region:  &v.Region,
		Country: &v.Country,
	}
	if v.Url != "" {
		res.URL = &v.Url
	}

	return res
}
