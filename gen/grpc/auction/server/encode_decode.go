// Code generated by goa v3.0.4, DO NOT EDIT.
//
// auction gRPC server encoders and decoders
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	auction "calcsvc/gen/auction"
	auctionviews "calcsvc/gen/auction/views"
	auctionpb "calcsvc/gen/grpc/auction/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodePickResponse encodes responses from the "auction" service "pick"
// endpoint.
func EncodePickResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(auctionviews.StoredBottleCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auction", "pick", "auctionviews.StoredBottleCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewStoredBottleCollection(result)
	return resp, nil
}

// DecodePickRequest decodes requests sent to "auction" service "pick" endpoint.
func DecodePickRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *auctionpb.PickRequest
		ok      bool
	)
	{
		if message, ok = v.(*auctionpb.PickRequest); !ok {
			return nil, goagrpc.ErrInvalidType("auction", "pick", "*auctionpb.PickRequest", v)
		}
	}
	var payload *auction.Criteria
	{
		payload = NewPickPayload(message)
	}
	return payload, nil
}

// EncodeGetResponse encodes responses from the "auction" service "get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(auctionviews.StoredBottleCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auction", "get", "auctionviews.StoredBottleCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewStoredBottleCollection(result)
	return resp, nil
}
