// Code generated by goa v3.0.4, DO NOT EDIT.
//
// auction gRPC server encoders and decoders
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	auction "calcsvc/gen/auction"
	auctionviews "calcsvc/gen/auction/views"
	auctionpb "calcsvc/gen/grpc/auction/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetAuctionProductListByStatusResponse encodes responses from the
// "auction" service "getAuctionProductListByStatus" endpoint.
func EncodeGetAuctionProductListByStatusResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(auctionviews.AuctionProductCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auction", "getAuctionProductListByStatus", "auctionviews.AuctionProductCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewAuctionProductCollection(result)
	return resp, nil
}

// DecodeGetAuctionProductListByStatusRequest decodes requests sent to
// "auction" service "getAuctionProductListByStatus" endpoint.
func DecodeGetAuctionProductListByStatusRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *auctionpb.GetAuctionProductListByStatusRequest
		ok      bool
	)
	{
		if message, ok = v.(*auctionpb.GetAuctionProductListByStatusRequest); !ok {
			return nil, goagrpc.ErrInvalidType("auction", "getAuctionProductListByStatus", "*auctionpb.GetAuctionProductListByStatusRequest", v)
		}
	}
	var payload *auction.ListData
	{
		payload = NewGetAuctionProductListByStatusPayload(message)
	}
	return payload, nil
}

// EncodeGetAuctionProductDetailResponse encodes responses from the "auction"
// service "getAuctionProductDetail" endpoint.
func EncodeGetAuctionProductDetailResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*auctionviews.AuctionProduct)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auction", "getAuctionProductDetail", "*auctionviews.AuctionProduct", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewGetAuctionProductDetailResponse(result)
	return resp, nil
}

// DecodeGetAuctionProductDetailRequest decodes requests sent to "auction"
// service "getAuctionProductDetail" endpoint.
func DecodeGetAuctionProductDetailRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *auctionpb.GetAuctionProductDetailRequest
		ok      bool
	)
	{
		if message, ok = v.(*auctionpb.GetAuctionProductDetailRequest); !ok {
			return nil, goagrpc.ErrInvalidType("auction", "getAuctionProductDetail", "*auctionpb.GetAuctionProductDetailRequest", v)
		}
	}
	var payload *auction.GetAuctionProductDetailPayload
	{
		payload = NewGetAuctionProductDetailPayload(message)
	}
	return payload, nil
}
