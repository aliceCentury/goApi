// Code generated by goa v3.0.4, DO NOT EDIT.
//
// product gRPC server types
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	productpb "calcsvc/gen/grpc/product/pb"
	product "calcsvc/gen/product"
	productviews "calcsvc/gen/product/views"
)

// NewProductPayload builds the payload of the "product" endpoint of the
// "product" service from the gRPC request type.
func NewProductPayload(message *productpb.ProductRequest) *product.ProductPayload {
	v := &product.ProductPayload{
		ID: message.Id,
	}
	return v
}

// NewProductResponse builds the gRPC response type from the result of the
// "product" endpoint of the "product" service.
func NewProductResponse(result *productviews.ProductView) *productpb.ProductResponse {
	message := &productpb.ProductResponse{}
	if result.ID != nil {
		message.Id = int32(*result.ID)
	}
	if result.ArtNo != nil {
		message.ArtNo = *result.ArtNo
	}
	if result.CategoryName != nil {
		message.CategoryName = *result.CategoryName
	}
	if result.CategoryID != nil {
		message.CategoryId = int32(*result.CategoryID)
	}
	if result.CertCode != nil {
		message.CertCode = int32(*result.CertCode)
	}
	if result.CertType != nil {
		message.CertType = int32(*result.CertType)
	}
	if result.Colour != nil {
		message.Colour = *result.Colour
	}
	if result.ColourID != nil {
		message.ColourId = int32(*result.ColourID)
	}
	if result.CreatedAt != nil {
		message.CreatedAt = int32(*result.CreatedAt)
	}
	if result.Crowd != nil {
		message.Crowd = *result.Crowd
	}
	if result.CurrentPrice != nil {
		message.CurrentPrice = int32(*result.CurrentPrice)
	}
	if result.EndTime != nil {
		message.EndTime = int32(*result.EndTime)
	}
	if result.ExtAttrMap != nil {
		message.ExtAttrMap = int32(*result.ExtAttrMap)
	}
	if result.Level != nil {
		message.Level = int32(*result.Level)
	}
	if result.LevelID != nil {
		message.LevelId = int32(*result.LevelID)
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.MktPrice != nil {
		message.MktPrice = int32(*result.MktPrice)
	}
	if result.OperatorID != nil {
		message.OperatorId = int32(*result.OperatorID)
	}
	if result.Recommendations != nil {
		message.Recommendations = *result.Recommendations
	}
	if result.Scenario != nil {
		message.Scenario = *result.Scenario
	}
	if result.Size != nil {
		message.Size = *result.Size
	}
	if result.Status != nil {
		message.Status = int32(*result.Status)
	}
	if result.Style != nil {
		message.Style = *result.Style
	}
	if result.StyleID != nil {
		message.StyleId = *result.StyleID
	}
	if result.Summary != nil {
		message.Summary = *result.Summary
	}
	if result.TemplateID != nil {
		message.TemplateId = int32(*result.TemplateID)
	}
	if result.UpdatedAt != nil {
		message.UpdatedAt = int32(*result.UpdatedAt)
	}
	if result.Version != nil {
		message.Version = int32(*result.Version)
	}
	if result.Weight != nil {
		message.Weight = *result.Weight
	}
	if result.CarouselList != nil {
		message.CarouselList = make([]*productpb.Media, len(result.CarouselList))
		for i, val := range result.CarouselList {
			message.CarouselList[i] = &productpb.Media{}
			if val.MediaURL != nil {
				message.CarouselList[i].MediaUrl = *val.MediaURL
			}
			if val.MediaType != nil {
				message.CarouselList[i].MediaType = int32(*val.MediaType)
			}
			if val.Content != nil {
				message.CarouselList[i].Content = int32(*val.Content)
			}
			if val.Sequence != nil {
				message.CarouselList[i].Sequence = int32(*val.Sequence)
			}
			if val.MediaID != nil {
				message.CarouselList[i].MediaId = int32(*val.MediaID)
			}
		}
	}
	if result.DetailPics != nil {
		message.DetailPics = make([]*productpb.Media, len(result.DetailPics))
		for i, val := range result.DetailPics {
			message.DetailPics[i] = &productpb.Media{}
			if val.MediaURL != nil {
				message.DetailPics[i].MediaUrl = *val.MediaURL
			}
			if val.MediaType != nil {
				message.DetailPics[i].MediaType = int32(*val.MediaType)
			}
			if val.Content != nil {
				message.DetailPics[i].Content = int32(*val.Content)
			}
			if val.Sequence != nil {
				message.DetailPics[i].Sequence = int32(*val.Sequence)
			}
			if val.MediaID != nil {
				message.DetailPics[i].MediaId = int32(*val.MediaID)
			}
		}
	}
	if result.ScenarioList != nil {
		message.ScenarioList = make([]string, len(result.ScenarioList))
		for i, val := range result.ScenarioList {
			message.ScenarioList[i] = val
		}
	}
	return message
}

// NewProductNotFoundError builds the gRPC error response type from the error
// of the "product" endpoint of the "product" service.
func NewProductNotFoundError(er *product.NotFound) *productpb.ProductNotFoundError {
	message := &productpb.ProductNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}
